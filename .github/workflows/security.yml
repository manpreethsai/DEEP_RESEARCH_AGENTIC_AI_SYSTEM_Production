name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Job 1: Secret Scanning
  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Gitleaks results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: gitleaks-report
        path: results.sarif

  # Job 2: Dependency Vulnerability Scanning
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: Safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Pip audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-vulnerability-reports
        path: |
          safety-report.json
          pip-audit-report.json

  # Job 3: Container Security Scanning
  container-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t deep-research:security-scan .
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'deep-research:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: 'deep-research:security-scan'
        fail-build: false
        severity-cutoff: high
        
    - name: Upload Grype results
      uses: actions/upload-artifact@v3
      with:
        name: grype-vulnerability-report
        path: results.sarif

  # Job 4: Code Security Analysis
  code-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep
        
    - name: Run Bandit security analysis
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt -o bandit-report.txt || true
        
    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json src/ || true
        
    - name: Upload security analysis reports
      uses: actions/upload-artifact@v3
      with:
        name: code-security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          semgrep-report.json

  # Job 5: Infrastructure Security (Dockerfile and Kubernetes)
  infrastructure-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Dockerfile security scan with Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        
    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif
        
    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security > docker-bench-results.txt || true
          
    - name: Upload Docker Bench results
      uses: actions/upload-artifact@v3
      with:
        name: docker-bench-security-report
        path: docker-bench-results.txt

  # Job 6: License Compliance
  license-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-licenses
        
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses-report.json
        pip-licenses --format=csv --output-file=licenses-report.csv
        
    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-compliance-reports
        path: |
          licenses-report.json
          licenses-report.csv

  # Job 7: Security Summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, container-scan, code-security, infrastructure-security, license-check]
    if: always()
    
    steps:
    - name: Download all security reports
      uses: actions/download-artifact@v3
      
    - name: Create security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
        echo "- Code Security: ${{ needs.code-security.result }}" >> security-summary.md
        echo "- Infrastructure Security: ${{ needs.infrastructure-security.result }}" >> security-summary.md
        echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Create security issue if vulnerabilities found
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Security vulnerabilities detected',
            body: `Security scan failed on ${context.sha}. Please check the security reports for details.`,
            labels: ['security', 'vulnerability']
          });

  # Job 8: Notify Security Team
  notify-security:
    runs-on: ubuntu-latest
    needs: security-summary
    if: failure()
    
    steps:
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: 'ðŸš¨ Security vulnerabilities detected in deep-research repository!'
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }} 